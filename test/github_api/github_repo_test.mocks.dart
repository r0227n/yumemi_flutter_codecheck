// Mocks generated by Mockito 5.4.4 from annotations
// in yumemi_flutter_codecheck/test/github_api/github_repo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:yumemi_flutter_codecheck/repository/github/github_client.dart' as _i8;
import 'package:yumemi_flutter_codecheck/repository/github/github_repo_repository.dart' as _i5;
import 'package:yumemi_flutter_codecheck/repository/github/models/license_content.dart' as _i4;
import 'package:yumemi_flutter_codecheck/repository/github/models/repository.dart' as _i3;
import 'package:yumemi_flutter_codecheck/repository/github/models/search_response.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSearchResponse_0 extends _i1.SmartFake implements _i2.SearchResponse {
  _FakeSearchResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRepository_1 extends _i1.SmartFake implements _i3.Repository {
  _FakeRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLicenseContent_2 extends _i1.SmartFake implements _i4.LicenseContent {
  _FakeLicenseContent_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GitHubRepoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGitHubRepoRepository extends _i1.Mock implements _i5.GitHubRepoRepository {
  @override
  String get apiVersion => (super.noSuchMethod(
        Invocation.getter(#apiVersion),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#apiVersion),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#apiVersion),
        ),
      ) as String);

  @override
  String get token => (super.noSuchMethod(
        Invocation.getter(#token),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#token),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#token),
        ),
      ) as String);

  @override
  String get feature => (super.noSuchMethod(
        Invocation.getter(#feature),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#feature),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#feature),
        ),
      ) as String);

  @override
  _i7.Future<_i2.SearchResponse> search(
    String? query, {
    _i5.RepositorySort? sort = _i5.RepositorySort.stars,
    _i8.Direction? order = _i8.Direction.desc,
    int? perPage = 30,
    int? page = 1,
    String? token,
    String? apiVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
          {
            #sort: sort,
            #order: order,
            #perPage: perPage,
            #page: page,
            #token: token,
            #apiVersion: apiVersion,
          },
        ),
        returnValue: _i7.Future<_i2.SearchResponse>.value(_FakeSearchResponse_0(
          this,
          Invocation.method(
            #search,
            [query],
            {
              #sort: sort,
              #order: order,
              #perPage: perPage,
              #page: page,
              #token: token,
              #apiVersion: apiVersion,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i2.SearchResponse>.value(_FakeSearchResponse_0(
          this,
          Invocation.method(
            #search,
            [query],
            {
              #sort: sort,
              #order: order,
              #perPage: perPage,
              #page: page,
              #token: token,
              #apiVersion: apiVersion,
            },
          ),
        )),
      ) as _i7.Future<_i2.SearchResponse>);

  @override
  _i7.Future<_i3.Repository> get(
    String? fullName, {
    String? token,
    String? apiVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [fullName],
          {
            #token: token,
            #apiVersion: apiVersion,
          },
        ),
        returnValue: _i7.Future<_i3.Repository>.value(_FakeRepository_1(
          this,
          Invocation.method(
            #get,
            [fullName],
            {
              #token: token,
              #apiVersion: apiVersion,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i3.Repository>.value(_FakeRepository_1(
          this,
          Invocation.method(
            #get,
            [fullName],
            {
              #token: token,
              #apiVersion: apiVersion,
            },
          ),
        )),
      ) as _i7.Future<_i3.Repository>);

  @override
  _i7.Future<_i4.LicenseContent> getLicense(
    String? fullName, {
    String? token,
    String? apiVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLicense,
          [fullName],
          {
            #token: token,
            #apiVersion: apiVersion,
          },
        ),
        returnValue: _i7.Future<_i4.LicenseContent>.value(_FakeLicenseContent_2(
          this,
          Invocation.method(
            #getLicense,
            [fullName],
            {
              #token: token,
              #apiVersion: apiVersion,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i4.LicenseContent>.value(_FakeLicenseContent_2(
          this,
          Invocation.method(
            #getLicense,
            [fullName],
            {
              #token: token,
              #apiVersion: apiVersion,
            },
          ),
        )),
      ) as _i7.Future<_i4.LicenseContent>);

  @override
  _i7.Future<({int closedCount, int openCount})> getIssues({
    required String? owner,
    required String? name,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIssues,
          [],
          {
            #owner: owner,
            #name: name,
            #token: token,
          },
        ),
        returnValue:
            _i7.Future<({int closedCount, int openCount})>.value((closedCount: 0, openCount: 0)),
        returnValueForMissingStub:
            _i7.Future<({int closedCount, int openCount})>.value((closedCount: 0, openCount: 0)),
      ) as _i7.Future<({int closedCount, int openCount})>);
}
